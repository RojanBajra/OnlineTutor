//
//  MathsManager.swift
//  OnlineTutor
//
//  Created by Rojan Bajracharya on 5/26/20.
//  Copyright © 2020 Rojan Bajracharya. All rights reserved.
//

import Foundation

struct MathsManager {
    
    let listOfShapes = [
        Maths(
            shapeName: "Sphere",
            description: "A sphere is a geometrical object in three-dimensional space that is the surface of a ball. Like a circle in a two-dimensional space, a sphere is defined mathematically as the set of points that are all at the same distance r from a given point, but in a three-dimensional space.\n",
            symbol: "r - Radius\n",
            volume: "(4/3) 4π * r^3",
            surfaceArea: "4π * r^2",
            lateralSurfaceArea: "4π * r^2",
            baseArea: "no base"
        ),
        Maths(
            shapeName: "Torus",
            description: "In geometry, a torus is a surface of revolution generated by revolving a circle in three-dimensional space about an axis that is coplanar with the circle.\n",
            symbol: "R - Major Radius\nr - Minor Radius\n",
            volume: "(πr2) * (2πR)",
            surfaceArea: "no surface area",
            lateralSurfaceArea: "no lateral surface area",
            baseArea: "(2πR) * (2πr)"
        ),
        Maths(
            shapeName: "Cylinder",
            description: "A cylinder has traditionally been a three-dimensional solid, one of the most basic of curvilinear geometric shapes. It is the idealized version of a solid physical tin can having lids on top and bottom.\n",
            symbol: "r - Radius\nh - Height\n",
            volume: "π * r^2 * h",
            surfaceArea: "2πrh + 2πr^2",
            lateralSurfaceArea: "2πrh",
            baseArea: "πr^2"
        ),
        Maths(
            shapeName: "Cone",
            description: "A cone is a distinctive three-dimensional geometric figure that has a flat surface and a curved surface, pointed towards the top. The pointed end of the cone is called the apex, whereas the flat surface is called the base.\n",
            symbol: "r - Radius\nh - Height\n",
            volume: "πr^2 * (h/3)",
            surfaceArea: "πr * [r + (h^2 + r^2)^(1/2)]",
            lateralSurfaceArea: "πr * [r + (h^2 + r^2)^(1/2)]",
            baseArea: "πr^2"
        ),
        Maths(
            shapeName: "Cube",
            description: "In geometry, a cube is a three-dimensional solid object bounded by six square faces, facets or sides, with three meeting at each vertex.\n",
            symbol: "a - Edge\n",
            volume: "a^3",
            surfaceArea: "6 * a^2",
            lateralSurfaceArea: "6 * a^2",
            baseArea: "a^2"
        ),
        Maths(
            shapeName: "Cuboid",
            description: "In geometry, a cuboid is a convex polyhedron bounded by six quadrilateral faces, whose polyhedral graph is the same as that of a cube.\n",
            symbol: "l - Base Length\nb - Base Breadth\nh - Height of the Cuboid\n",
            volume: "l * b * h",
            surfaceArea: "2lb + 2lh + 2hb",
            lateralSurfaceArea: "2(l + b)h",
            baseArea: "l * b"
        ),
        Maths(
            shapeName: "Pyramid",
            description: "A pyramid is a structure whose outer surfaces are triangular and converge to a single step at the top, making the shape roughly a pyramid in the geometric sense.\n",
            symbol: "l - Base Lenght\nw - Base width\nh - Pyramid height\n",
            volume: "(l * w * h) / 3",
            surfaceArea: "lw + l * [{(w / 2)^2 + h^2}^(1/2) + w] * [(l / 2)^2 + h^2]^(1/2)",
            lateralSurfaceArea: "l * [{(w / 2)^2 + h^2}^(1/2) + w] * [(l / 2)^2 + h^2]^(1/2)",
            baseArea: "lw"
        ),
    ]
    
    func getShapeCount() -> Int {
        return listOfShapes.count
    }
    
    func getShapeName(dataPart: Int) -> String {
        return listOfShapes[dataPart].shapeName
    }
    
    func getShapeDescription(dataPart: Int) -> String {
        return listOfShapes[dataPart].description
    }
    
    func getShapeVolume(dataPart: Int) -> String {
        return listOfShapes[dataPart].volume
    }
    
    func getShapeSurfaceArea(dataPart: Int) -> String {
        return listOfShapes[dataPart].surfaceArea
    }
    
    func getShapeLateralSurfaceArea(dataPart: Int) -> String {
        return listOfShapes[dataPart].lateralSurfaceArea
    }
    
    func getShapeBaseArea(dataPart: Int) -> String {
        return listOfShapes[dataPart].baseArea
    }
    
    func getShapeSymbol(dataPart: Int) -> String {
        return listOfShapes[dataPart].symbol
    }
    
}
